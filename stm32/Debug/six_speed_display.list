
six_speed_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000141c  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080059f4  080059f4  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059f4  080059f4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080059fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000a8  08005aa4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005aa4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f941  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025fb  00000000  00000000  0002fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0d  00000000  00000000  00032de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dad4  00000000  00000000  000337f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc85  00000000  00000000  000512c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4fe8  00000000  00000000  0005ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a68  00000000  00000000  00113f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001179a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080045c0 	.word	0x080045c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	080045c0 	.word	0x080045c0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LIS3DH_Config>:
#include <stm32g431xx.h>

#define CS_GPIO_PORT GPIOA

void LIS3DH_Config(lis3dh_t* lis3dh, void* hspi, uint16_t cs_pin)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	80fb      	strh	r3, [r7, #6]

    lis3dh->dev_ctx.write_reg = acc_write;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <LIS3DH_Config+0x60>)
 8000b52:	601a      	str	r2, [r3, #0]
    lis3dh->dev_ctx.read_reg = acc_read;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <LIS3DH_Config+0x64>)
 8000b58:	605a      	str	r2, [r3, #4]
    lis3dh->dev_ctx.mdelay = platform_delay;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <LIS3DH_Config+0x68>)
 8000b5e:	609a      	str	r2, [r3, #8]
    lis3dh->dev_ctx.handle = hspi;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	60da      	str	r2, [r3, #12]
    lis3dh->dev_ctx.cs_pin = cs_pin;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	821a      	strh	r2, [r3, #16]

    for (int i = 0; i < 3; ++i)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00b      	b.n	8000b8a <LIS3DH_Config+0x4a>
    {
  	  lis3dh->offset[i] = 0;
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	330a      	adds	r3, #10
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; ++i)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	ddf0      	ble.n	8000b72 <LIS3DH_Config+0x32>
    }

}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	08000d25 	.word	0x08000d25
 8000ba4:	08000c9f 	.word	0x08000c9f
 8000ba8:	08000d97 	.word	0x08000d97

08000bac <Accelerometer_Init>:


void Accelerometer_Init(lis3dh_t* acc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

    /* Enable Block Data Update. */
    lis3dh_block_data_update_set(&acc->dev_ctx, PROPERTY_ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 f910 	bl	8003dde <lis3dh_block_data_update_set>
    /* Set Output Data Rate to 1Hz. */
    lis3dh_data_rate_set(&acc->dev_ctx, LIS3DH_ODR_100Hz);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 f8bf 	bl	8003d46 <lis3dh_data_rate_set>
    /* Set full scale to 2g. */
    lis3dh_full_scale_set(&acc->dev_ctx, LIS3DH_2g);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f8e0 	bl	8003d92 <lis3dh_full_scale_set>
    /* Set device in continuous mode with 12 bit resol. */
    lis3dh_operating_mode_set(&acc->dev_ctx, LIS3DH_HR_12bit);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 f860 	bl	8003c9c <lis3dh_operating_mode_set>

    calibrate_offset(acc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f8e5 	bl	8000dac <calibrate_offset>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <read_accelerometer_data>:


void read_accelerometer_data(lis3dh_t* accel)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
    lis3dh_xl_data_ready_get(&accel->dev_ctx, &accel->reg.byte);
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3328      	adds	r3, #40	; 0x28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f003 f915 	bl	8003e2a <lis3dh_xl_data_ready_get>

if (accel->reg.byte) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d02e      	beq.n	8000c68 <read_accelerometer_data+0x7e>
      // Read accelerometer data
      memset(accel->data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3314      	adds	r3, #20
 8000c0e:	2206      	movs	r2, #6
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 f96d 	bl	8003ef2 <memset>
      lis3dh_acceleration_raw_get(&accel->dev_ctx, (int16_t*)&accel->data_raw_acceleration);
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3314      	adds	r3, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4610      	mov	r0, r2
 8000c22:	f003 f91b 	bl	8003e5c <lis3dh_acceleration_raw_get>

      accel->acceleration_mg[0] =
        lis3dh_from_fs2_hr_to_mg(accel->data_raw_acceleration[0]);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 f81d 	bl	8003c6c <lis3dh_from_fs2_hr_to_mg>
 8000c32:	eef0 7a40 	vmov.f32	s15, s0
      accel->acceleration_mg[0] =
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	edc3 7a07 	vstr	s15, [r3, #28]
      accel->acceleration_mg[1] =
        lis3dh_from_fs2_hr_to_mg(accel->data_raw_acceleration[1]);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 f812 	bl	8003c6c <lis3dh_from_fs2_hr_to_mg>
 8000c48:	eef0 7a40 	vmov.f32	s15, s0
      accel->acceleration_mg[1] =
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	edc3 7a08 	vstr	s15, [r3, #32]
      accel->acceleration_mg[2] =
        lis3dh_from_fs2_hr_to_mg(accel->data_raw_acceleration[2]);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 f807 	bl	8003c6c <lis3dh_from_fs2_hr_to_mg>
 8000c5e:	eef0 7a40 	vmov.f32	s15, s0
      accel->acceleration_mg[2] =
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}

}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte, SPI_HandleTypeDef* hspi)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  HAL_SPI_TransmitReceive(hspi, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 1000);
 8000c80:	f107 020f 	add.w	r2, r7, #15
 8000c84:	1df9      	adds	r1, r7, #7
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	6838      	ldr	r0, [r7, #0]
 8000c90:	f002 fc22 	bl	80034d8 <HAL_SPI_TransmitReceive>

  return receivedbyte;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <acc_read>:

int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len, uint16_t cs_pin)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	460b      	mov	r3, r1
 8000cac:	72fb      	strb	r3, [r7, #11]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	813b      	strh	r3, [r7, #8]

	  if(len > 0x01)
 8000cb2:	893b      	ldrh	r3, [r7, #8]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d904      	bls.n	8000cc2 <acc_read+0x24>
	  {
	    reg |= (uint8_t)(0x80 | 0x40);
 8000cb8:	7afb      	ldrb	r3, [r7, #11]
 8000cba:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000cbe:	72fb      	strb	r3, [r7, #11]
 8000cc0:	e003      	b.n	8000cca <acc_read+0x2c>
	  }
	  else
	  {
	    reg |= 0x80;
 8000cc2:	7afb      	ldrb	r3, [r7, #11]
 8000cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc8:	72fb      	strb	r3, [r7, #11]
	  }

  uint8_t dummy = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]

  HAL_GPIO_WritePin(CS_GPIO_PORT, cs_pin, GPIO_PIN_RESET);
 8000cce:	8c3b      	ldrh	r3, [r7, #32]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f001 fc1c 	bl	8002514 <HAL_GPIO_WritePin>
  SPIx_WriteRead(reg, handle);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffc5 	bl	8000c70 <SPIx_WriteRead>

  while(len > 0x00)
 8000ce6:	e00e      	b.n	8000d06 <acc_read+0x68>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *bufp = SPIx_WriteRead(dummy, handle);
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	68f9      	ldr	r1, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffbf 	bl	8000c70 <SPIx_WriteRead>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	701a      	strb	r2, [r3, #0]
    len--;
 8000cfa:	893b      	ldrh	r3, [r7, #8]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	813b      	strh	r3, [r7, #8]
    bufp++;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
  while(len > 0x00)
 8000d06:	893b      	ldrh	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1ed      	bne.n	8000ce8 <acc_read+0x4a>
  }

  HAL_GPIO_WritePin(CS_GPIO_PORT, cs_pin, GPIO_PIN_SET);
 8000d0c:	8c3b      	ldrh	r3, [r7, #32]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f001 fbfd 	bl	8002514 <HAL_GPIO_WritePin>

  return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <acc_write>:

int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len, uint16_t cs_pin)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	4613      	mov	r3, r2
 8000d36:	813b      	strh	r3, [r7, #8]

  if(len > 0x01)
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d903      	bls.n	8000d46 <acc_write+0x22>
	{
	  reg |= 0x40;
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d44:	72fb      	strb	r3, [r7, #11]
	}

  HAL_GPIO_WritePin(CS_GPIO_PORT, cs_pin, GPIO_PIN_RESET);
 8000d46:	8b3b      	ldrh	r3, [r7, #24]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 fbe0 	bl	8002514 <HAL_GPIO_WritePin>

  SPIx_WriteRead(reg, handle);
 8000d54:	7afb      	ldrb	r3, [r7, #11]
 8000d56:	68f9      	ldr	r1, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff89 	bl	8000c70 <SPIx_WriteRead>

  while(len >= 0x01)
 8000d5e:	e00b      	b.n	8000d78 <acc_write+0x54>
  {
	SPIx_WriteRead(*bufp, handle);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff82 	bl	8000c70 <SPIx_WriteRead>
    len--;
 8000d6c:	893b      	ldrh	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	813b      	strh	r3, [r7, #8]
    bufp++;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3301      	adds	r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
  while(len >= 0x01)
 8000d78:	893b      	ldrh	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <acc_write+0x3c>
  }
  HAL_GPIO_WritePin(CS_GPIO_PORT, cs_pin, GPIO_PIN_SET);
 8000d7e:	8b3b      	ldrh	r3, [r7, #24]
 8000d80:	2201      	movs	r2, #1
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 fbc4 	bl	8002514 <HAL_GPIO_WritePin>

  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <platform_delay>:

void platform_delay(uint32_t ms)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 ff4a 	bl	8001c38 <HAL_Delay>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <calibrate_offset>:

const float* calibrate_offset(lis3dh_t* acc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

	for (int j = 0; j <= (ACC_SAMPLES - 1); ++j)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e028      	b.n	8000e0c <calibrate_offset+0x60>
	{
		read_accelerometer_data(acc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff15 	bl	8000bea <read_accelerometer_data>

		for (int i = 0; i <= 2; ++i)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	e01c      	b.n	8000e00 <calibrate_offset+0x54>
		{
			acc->offset[i] += (acc->acceleration_mg[i]);
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	330a      	adds	r3, #10
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	ed93 7a00 	vldr	s14, [r3]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3306      	adds	r3, #6
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	3304      	adds	r3, #4
 8000de2:	edd3 7a00 	vldr	s15, [r3]
 8000de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	330a      	adds	r3, #10
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3304      	adds	r3, #4
 8000df6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i <= 2; ++i)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	dddf      	ble.n	8000dc6 <calibrate_offset+0x1a>
	for (int j = 0; j <= (ACC_SAMPLES - 1); ++j)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e12:	4293      	cmp	r3, r2
 8000e14:	ddd1      	ble.n	8000dba <calibrate_offset+0xe>
		}
	}

  	for (int i = 0; i <= 2; ++i)
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e016      	b.n	8000e4a <calibrate_offset+0x9e>
  	{
  		acc->offset[i] = (acc->offset[i] / ((float)ACC_SAMPLES));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	330a      	adds	r3, #10
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3304      	adds	r3, #4
 8000e28:	ed93 7a00 	vldr	s14, [r3]
 8000e2c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000e5c <calibrate_offset+0xb0>
 8000e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	330a      	adds	r3, #10
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3304      	adds	r3, #4
 8000e40:	edc3 7a00 	vstr	s15, [r3]
  	for (int i = 0; i <= 2; ++i)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	dde5      	ble.n	8000e1c <calibrate_offset+0x70>
  	}

  	return acc->offset;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	332c      	adds	r3, #44	; 0x2c
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	461c4000 	.word	0x461c4000

08000e60 <read_degree_difference>:

int* read_degree_difference(lis3dh_t* const ref, lis3dh_t* const shift, int* avg_degrees)
  {
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b08d      	sub	sp, #52	; 0x34
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	float avg_acceleration[3] = {0.0, 0.0, 0.0};
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]

	for (int j = 0; j <= (ACC_SAMPLES - 1); ++j)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e82:	e063      	b.n	8000f4c <read_degree_difference+0xec>
	{
		read_accelerometer_data(shift);
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f7ff feb0 	bl	8000bea <read_accelerometer_data>
		read_accelerometer_data(ref);
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff fead 	bl	8000bea <read_accelerometer_data>

		for (int i = 0; i <= 2; ++i)
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e94:	e054      	b.n	8000f40 <read_degree_difference+0xe0>
		{
			avg_acceleration[i] += (((shift->acceleration_mg[i] - shift->offset[i]) * (1 - ((ref->offset[i] - shift->offset[i]) / 1000)))) - (ref->acceleration_mg[i] - ref->offset[i]);
 8000e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	3330      	adds	r3, #48	; 0x30
 8000e9c:	443b      	add	r3, r7
 8000e9e:	3b1c      	subs	r3, #28
 8000ea0:	ed93 7a00 	vldr	s14, [r3]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	3304      	adds	r3, #4
 8000eb0:	edd3 6a00 	vldr	s13, [r3]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	330a      	adds	r3, #10
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	330a      	adds	r3, #10
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	ed93 6a00 	vldr	s12, [r3]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	330a      	adds	r3, #10
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000eec:	eddf 5a46 	vldr	s11, [pc, #280]	; 8001008 <read_degree_difference+0x1a8>
 8000ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000ef4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ef8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	3306      	adds	r3, #6
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	ed93 6a00 	vldr	s12, [r3]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	330a      	adds	r3, #10
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	3330      	adds	r3, #48	; 0x30
 8000f32:	443b      	add	r3, r7
 8000f34:	3b1c      	subs	r3, #28
 8000f36:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i <= 2; ++i)
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	dda7      	ble.n	8000e96 <read_degree_difference+0x36>
	for (int j = 0; j <= (ACC_SAMPLES - 1); ++j)
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	3301      	adds	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f52:	4293      	cmp	r3, r2
 8000f54:	dd96      	ble.n	8000e84 <read_degree_difference+0x24>
		}
	}

	for (int i = 0; i <= 2; ++i)
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	e014      	b.n	8000f86 <read_degree_difference+0x126>
	{
		avg_acceleration[i] = (avg_acceleration[i] / ((float)ACC_SAMPLES));
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	443b      	add	r3, r7
 8000f64:	3b1c      	subs	r3, #28
 8000f66:	ed93 7a00 	vldr	s14, [r3]
 8000f6a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800100c <read_degree_difference+0x1ac>
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	443b      	add	r3, r7
 8000f7a:	3b1c      	subs	r3, #28
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <= 2; ++i)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	3301      	adds	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	dde7      	ble.n	8000f5c <read_degree_difference+0xfc>
	}


	for (int i = 0; i <= 2; ++i)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	e02d      	b.n	8000fee <read_degree_difference+0x18e>
	{
		avg_degrees[i] = (asin((avg_acceleration[i] / ONE_G)) * (180 / PI));
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	443b      	add	r3, r7
 8000f9a:	3b1c      	subs	r3, #28
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa9e 	bl	80004e0 <__aeabi_f2d>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <read_degree_difference+0x1b0>)
 8000faa:	f7ff fc1b 	bl	80007e4 <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	ec43 2b17 	vmov	d7, r2, r3
 8000fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fba:	eef0 0a67 	vmov.f32	s1, s15
 8000fbe:	f002 ffcb 	bl	8003f58 <asin>
 8000fc2:	ec51 0b10 	vmov	r0, r1, d0
 8000fc6:	a30e      	add	r3, pc, #56	; (adr r3, 8001000 <read_degree_difference+0x1a0>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fae0 	bl	8000590 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	18d4      	adds	r4, r2, r3
 8000fe0:	f7ff fd86 	bl	8000af0 <__aeabi_d2iz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	6023      	str	r3, [r4, #0]
	for (int i = 0; i <= 2; ++i)
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	3301      	adds	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	ddce      	ble.n	8000f92 <read_degree_difference+0x132>
	}

	return avg_degrees;
 8000ff4:	687b      	ldr	r3, [r7, #4]

  }
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3734      	adds	r7, #52	; 0x34
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	1af05a77 	.word	0x1af05a77
 8001004:	404ca5dc 	.word	0x404ca5dc
 8001008:	447a0000 	.word	0x447a0000
 800100c:	461c4000 	.word	0x461c4000
 8001010:	408f4000 	.word	0x408f4000

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_DMA_Init+0x50>)
 800101c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <MX_DMA_Init+0x50>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6493      	str	r3, [r2, #72]	; 0x48
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_DMA_Init+0x50>)
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_DMA_Init+0x50>)
 8001034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <MX_DMA_Init+0x50>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6493      	str	r3, [r2, #72]	; 0x48
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_DMA_Init+0x50>)
 8001040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200b      	movs	r0, #11
 8001050:	f000 feef 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001054:	200b      	movs	r0, #11
 8001056:	f000 ff06 	bl	8001e66 <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_GPIO_Init+0x7c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_GPIO_Init+0x7c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_GPIO_Init+0x7c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_GPIO_Init+0x7c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_GPIO_Init+0x7c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_GPIO_Init+0x7c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_RST_Pin|DISPLAY_DC_Pin|REF_CS_Pin|SHIFT_CS_Pin
 80010ae:	2201      	movs	r2, #1
 80010b0:	f240 1193 	movw	r1, #403	; 0x193
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f001 fa2c 	bl	8002514 <HAL_GPIO_WritePin>
                          |DISPLAY_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|DISPLAY_DC_Pin|REF_CS_Pin|SHIFT_CS_Pin
 80010bc:	f240 1393 	movw	r3, #403	; 0x193
 80010c0:	60fb      	str	r3, [r7, #12]
                          |DISPLAY_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f001 f89a 	bl	8002210 <HAL_GPIO_Init>

}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09e      	sub	sp, #120	; 0x78
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 fd33 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f82b 	bl	800114c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LIS3DH_Config(&ref, &hspi1, REF_CS_Pin);
 80010f6:	463b      	mov	r3, r7
 80010f8:	2210      	movs	r2, #16
 80010fa:	4913      	ldr	r1, [pc, #76]	; (8001148 <main+0x60>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd1f 	bl	8000b40 <LIS3DH_Config>
  LIS3DH_Config(&shift, &hspi1, SHIFT_CS_Pin);
 8001102:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	490f      	ldr	r1, [pc, #60]	; (8001148 <main+0x60>)
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fd18 	bl	8000b40 <LIS3DH_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f7ff ffaa 	bl	8001068 <MX_GPIO_Init>
  MX_DMA_Init();
 8001114:	f7ff ff7e 	bl	8001014 <MX_DMA_Init>
  MX_SPI1_Init();
 8001118:	f000 f92e 	bl	8001378 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();	//display init...do this after SPI init
 800111c:	f000 fb8e 	bl	800183c <ST7789_Init>

  HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f000 fd89 	bl	8001c38 <HAL_Delay>

  Accelerometer_Init(&ref);
 8001126:	463b      	mov	r3, r7
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd3f 	bl	8000bac <Accelerometer_Init>
  Accelerometer_Init(&shift);
 800112e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fd3a 	bl	8000bac <Accelerometer_Init>

    /* USER CODE BEGIN 3 */



	  sixspeed_process(&ref, &shift);
 8001138:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800113c:	463b      	mov	r3, r7
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f8ef 	bl	8001324 <sixspeed_process>
 8001146:	e7f7      	b.n	8001138 <main+0x50>
 8001148:	200000c4 	.word	0x200000c4

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2238      	movs	r2, #56	; 0x38
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fec9 	bl	8003ef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800116e:	2000      	movs	r0, #0
 8001170:	f001 f9e8 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2340      	movs	r3, #64	; 0x40
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800118a:	2306      	movs	r3, #6
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 126;
 800118e:	237e      	movs	r3, #126	; 0x7e
 8001190:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fa82 	bl	80026ac <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ae:	f000 f818 	bl	80011e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2303      	movs	r3, #3
 80011b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fd80 	bl	8002cd0 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011d6:	f000 f804 	bl	80011e2 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e6:	b672      	cpsid	i
}
 80011e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ea:	e7fe      	b.n	80011ea <Error_Handler+0x8>

080011ec <get_position>:
		{neutral_gear, neutral_gear, neutral_gear, neutral_gear},

		{second_gear,  fourth_gear,  sixth_gear,   reverse_gear}
};
uint8_t get_position(lis3dh_t* ref, lis3dh_t* shift)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]

	int avg_degrees[3] = {0, 0, 0};
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]

	read_degree_difference(ref, shift, &avg_degrees);
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	461a      	mov	r2, r3
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fe28 	bl	8000e60 <read_degree_difference>

	int8_t y_square  = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
	int8_t x_square  = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	75bb      	strb	r3, [r7, #22]

	if (avg_degrees[X_ARR_POS] >= 9)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b08      	cmp	r3, #8
 800121c:	dd02      	ble.n	8001224 <get_position+0x38>
		{x_square = up;}
 800121e:	2300      	movs	r3, #0
 8001220:	75bb      	strb	r3, [r7, #22]
 8001222:	e008      	b.n	8001236 <get_position+0x4a>
	else if (avg_degrees[X_ARR_POS] <= -9)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f113 0f08 	cmn.w	r3, #8
 800122a:	da02      	bge.n	8001232 <get_position+0x46>
		{x_square = down;}
 800122c:	2302      	movs	r3, #2
 800122e:	75bb      	strb	r3, [r7, #22]
 8001230:	e001      	b.n	8001236 <get_position+0x4a>
	else
		{x_square = center_x;}
 8001232:	2301      	movs	r3, #1
 8001234:	75bb      	strb	r3, [r7, #22]

	if (-avg_degrees[Y_ARR_POS] > 8)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f113 0f08 	cmn.w	r3, #8
 800123c:	da02      	bge.n	8001244 <get_position+0x58>
		{y_square = right_rev;}
 800123e:	2303      	movs	r3, #3
 8001240:	75fb      	strb	r3, [r7, #23]
 8001242:	e012      	b.n	800126a <get_position+0x7e>
	else if (-avg_degrees[Y_ARR_POS] >= 6 && -avg_degrees[Y_ARR_POS] <= 8)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f113 0f05 	cmn.w	r3, #5
 800124a:	da06      	bge.n	800125a <get_position+0x6e>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f113 0f08 	cmn.w	r3, #8
 8001252:	db02      	blt.n	800125a <get_position+0x6e>
		{y_square = right;}
 8001254:	2302      	movs	r3, #2
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e007      	b.n	800126a <get_position+0x7e>
	else if (-avg_degrees[Y_ARR_POS] <= -3)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b02      	cmp	r3, #2
 800125e:	dd02      	ble.n	8001266 <get_position+0x7a>
		{y_square = left;}
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	e001      	b.n	800126a <get_position+0x7e>
	else
		{y_square = center_y;}
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]

	return shift_grid[x_square][y_square];
 800126a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800126e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001272:	4904      	ldr	r1, [pc, #16]	; (8001284 <get_position+0x98>)
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	440a      	add	r2, r1
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000024 	.word	0x20000024

08001288 <get_gear_text>:

const char* get_gear_text(uint8_t position)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	switch (position)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b07      	cmp	r3, #7
 8001296:	d82b      	bhi.n	80012f0 <get_gear_text+0x68>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <get_gear_text+0x18>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012c1 	.word	0x080012c1
 80012a4:	080012c7 	.word	0x080012c7
 80012a8:	080012cd 	.word	0x080012cd
 80012ac:	080012d3 	.word	0x080012d3
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	080012df 	.word	0x080012df
 80012b8:	080012e5 	.word	0x080012e5
 80012bc:	080012eb 	.word	0x080012eb
	{

	case neutral_gear: return neutral;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <get_gear_text+0x78>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e016      	b.n	80012f4 <get_gear_text+0x6c>
	case first_gear:   return first;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <get_gear_text+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e013      	b.n	80012f4 <get_gear_text+0x6c>
	case second_gear:  return second;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <get_gear_text+0x80>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e010      	b.n	80012f4 <get_gear_text+0x6c>
	case third_gear:   return third;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <get_gear_text+0x84>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	e00d      	b.n	80012f4 <get_gear_text+0x6c>
	case fourth_gear:  return fourth;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <get_gear_text+0x88>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	e00a      	b.n	80012f4 <get_gear_text+0x6c>
	case fifth_gear:   return fifth;
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <get_gear_text+0x8c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e007      	b.n	80012f4 <get_gear_text+0x6c>
	case sixth_gear:   return sixth;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <get_gear_text+0x90>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	e004      	b.n	80012f4 <get_gear_text+0x6c>
	case reverse_gear: return reverse;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <get_gear_text+0x94>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e001      	b.n	80012f4 <get_gear_text+0x6c>

	default: return undefined_gear;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <get_gear_text+0x98>)
 80012f2:	681b      	ldr	r3, [r3, #0]

	}

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000004 	.word	0x20000004
 8001304:	20000008 	.word	0x20000008
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000010 	.word	0x20000010
 8001310:	20000014 	.word	0x20000014
 8001314:	20000018 	.word	0x20000018
 8001318:	2000001c 	.word	0x2000001c
 800131c:	20000020 	.word	0x20000020
 8001320:	20000000 	.word	0x20000000

08001324 <sixspeed_process>:


int sixspeed_process(lis3dh_t* ref, lis3dh_t* shift)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af04      	add	r7, sp, #16
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]

	while(1)
	{

		shift->position = get_position(ref, shift);
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff5b 	bl	80011ec <get_position>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		ST7789_WriteScaledChar(96, 16, *(get_gear_text(shift->position)), Font_16x26, MYGREEN, BLACK, 8);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff9e 	bl	8001288 <get_gear_text>
 800134c:	4603      	mov	r3, r0
 800134e:	7819      	ldrb	r1, [r3, #0]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <sixspeed_process+0x50>)
 8001352:	2208      	movs	r2, #8
 8001354:	9203      	str	r2, [sp, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	9202      	str	r2, [sp, #8]
 800135a:	f248 6279 	movw	r2, #34425	; 0x8679
 800135e:	9201      	str	r2, [sp, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	460a      	mov	r2, r1
 8001368:	2110      	movs	r1, #16
 800136a:	2060      	movs	r0, #96	; 0x60
 800136c:	f000 fb43 	bl	80019f6 <ST7789_WriteScaledChar>
		shift->position = get_position(ref, shift);
 8001370:	e7dd      	b.n	800132e <sixspeed_process+0xa>
 8001372:	bf00      	nop
 8001374:	20000034 	.word	0x20000034

08001378 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_SPI1_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <MX_SPI1_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_SPI1_Init+0x74>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_SPI1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x74>)
 8001392:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x74>)
 80013a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x74>)
 80013ae:	2210      	movs	r2, #16
 80013b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x74>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_SPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x74>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_SPI1_Init+0x74>)
 80013d8:	f001 fe5e 	bl	8003098 <HAL_SPI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f7ff fefe 	bl	80011e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000c4 	.word	0x200000c4
 80013f0:	40013000 	.word	0x40013000

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <HAL_SPI_MspInit+0xec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d160      	bne.n	80014d8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	4a32      	ldr	r2, [pc, #200]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 800141c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001420:	6613      	str	r3, [r2, #96]	; 0x60
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001446:	2328      	movs	r3, #40	; 0x28
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001456:	2305      	movs	r3, #5
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4821      	ldr	r0, [pc, #132]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001462:	f000 fed5 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001466:	2310      	movs	r3, #16
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4819      	ldr	r0, [pc, #100]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001482:	f000 fec5 	bl	8002210 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 800148a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 800148e:	220b      	movs	r2, #11
 8001490:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 8001494:	2210      	movs	r2, #16
 8001496:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014b2:	2220      	movs	r2, #32
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014be:	f000 fced 	bl	8001e9c <HAL_DMA_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 80014c8:	f7ff fe8b 	bl	80011e2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013000 	.word	0x40013000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	20000128 	.word	0x20000128
 80014f0:	40020008 	.word	0x40020008

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	; 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800152a:	f001 f8af 	bl	800268c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 fb38 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001596:	f000 fd29 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000128 	.word	0x20000128

080015a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015cc:	f7ff ffea 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopForever+0xe>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopForever+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f002 fc8b 	bl	8003f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fa:	f7ff fd75 	bl	80010e8 <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
  ldr   r0, =_estack
 8001600:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800160c:	080059fc 	.word	0x080059fc
  ldr r2, =_sbss
 8001610:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001614:	200002c4 	.word	0x200002c4

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f000 ff70 	bl	8002514 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001634:	2200      	movs	r2, #0
 8001636:	2102      	movs	r1, #2
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 ff6a 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001640:	1df9      	adds	r1, r7, #7
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001646:	2201      	movs	r2, #1
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <ST7789_WriteCommand+0x48>)
 800164a:	f001 fdd0 	bl	80031ee <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f000 ff5c 	bl	8002514 <HAL_GPIO_WritePin>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000c4 	.word	0x200000c4

08001668 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f000 ff4a 	bl	8002514 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001680:	2201      	movs	r2, #1
 8001682:	2102      	movs	r1, #2
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f000 ff44 	bl	8002514 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800168c:	e015      	b.n	80016ba <ST7789_WriteData+0x52>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001694:	4293      	cmp	r3, r2
 8001696:	bf28      	it	cs
 8001698:	4613      	movcs	r3, r2
 800169a:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800169c:	89fa      	ldrh	r2, [r7, #14]
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <ST7789_WriteData+0x70>)
 80016a6:	f001 fda2 	bl	80031ee <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e6      	bne.n	800168e <ST7789_WriteData+0x26>
	}

	ST7789_UnSelect();
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f000 ff23 	bl	8002514 <HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000c4 	.word	0x200000c4

080016dc <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f000 ff10 	bl	8002514 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80016f4:	2201      	movs	r2, #1
 80016f6:	2102      	movs	r1, #2
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f000 ff0a 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001700:	1df9      	adds	r1, r7, #7
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001706:	2201      	movs	r2, #1
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <ST7789_WriteSmallData+0x48>)
 800170a:	f001 fd70 	bl	80031ee <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 fefc 	bl	8002514 <HAL_GPIO_WritePin>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200000c4 	.word	0x200000c4

08001728 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001732:	2036      	movs	r0, #54	; 0x36
 8001734:	f7ff ff72 	bl	800161c <ST7789_WriteCommand>
	switch (m) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d81a      	bhi.n	8001774 <ST7789_SetRotation+0x4c>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <ST7789_SetRotation+0x1c>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001755 	.word	0x08001755
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001765 	.word	0x08001765
 8001750:	0800176d 	.word	0x0800176d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001754:	20c0      	movs	r0, #192	; 0xc0
 8001756:	f7ff ffc1 	bl	80016dc <ST7789_WriteSmallData>
		break;
 800175a:	e00c      	b.n	8001776 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff ffbd 	bl	80016dc <ST7789_WriteSmallData>
		break;
 8001762:	e008      	b.n	8001776 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ffb9 	bl	80016dc <ST7789_WriteSmallData>
		break;
 800176a:	e004      	b.n	8001776 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800176c:	2060      	movs	r0, #96	; 0x60
 800176e:	f7ff ffb5 	bl	80016dc <ST7789_WriteSmallData>
		break;
 8001772:	e000      	b.n	8001776 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001774:	bf00      	nop
	}
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	4604      	mov	r4, r0
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4623      	mov	r3, r4
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	4603      	mov	r3, r0
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
 800179a:	4613      	mov	r3, r2
 800179c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f000 feb4 	bl	8002514 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	82fb      	strh	r3, [r7, #22]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	827b      	strh	r3, [r7, #18]
 80017b8:	883b      	ldrh	r3, [r7, #0]
 80017ba:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80017bc:	202a      	movs	r0, #42	; 0x2a
 80017be:	f7ff ff2d 	bl	800161c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80017c2:	8afb      	ldrh	r3, [r7, #22]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	733b      	strb	r3, [r7, #12]
 80017cc:	8afb      	ldrh	r3, [r7, #22]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	737b      	strb	r3, [r7, #13]
 80017d2:	8abb      	ldrh	r3, [r7, #20]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73bb      	strb	r3, [r7, #14]
 80017dc:	8abb      	ldrh	r3, [r7, #20]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2104      	movs	r1, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff3d 	bl	8001668 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80017ee:	202b      	movs	r0, #43	; 0x2b
 80017f0:	f7ff ff14 	bl	800161c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80017f4:	8a7b      	ldrh	r3, [r7, #18]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	723b      	strb	r3, [r7, #8]
 80017fe:	8a7b      	ldrh	r3, [r7, #18]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	727b      	strb	r3, [r7, #9]
 8001804:	8a3b      	ldrh	r3, [r7, #16]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b29b      	uxth	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	72bb      	strb	r3, [r7, #10]
 800180e:	8a3b      	ldrh	r3, [r7, #16]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	2104      	movs	r1, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff24 	bl	8001668 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001820:	202c      	movs	r0, #44	; 0x2c
 8001822:	f7ff fefb 	bl	800161c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f000 fe70 	bl	8002514 <HAL_GPIO_WritePin>
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8001842:	2019      	movs	r0, #25
 8001844:	f000 f9f8 	bl	8001c38 <HAL_Delay>
    ST7789_RST_Clr();
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f000 fe60 	bl	8002514 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001854:	2019      	movs	r0, #25
 8001856:	f000 f9ef 	bl	8001c38 <HAL_Delay>
    ST7789_RST_Set();
 800185a:	2201      	movs	r2, #1
 800185c:	2101      	movs	r1, #1
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f000 fe57 	bl	8002514 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f000 f9e6 	bl	8001c38 <HAL_Delay>

	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800186c:	2011      	movs	r0, #17
 800186e:	f7ff fed5 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001872:	203a      	movs	r0, #58	; 0x3a
 8001874:	f7ff fed2 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001878:	2055      	movs	r0, #85	; 0x55
 800187a:	f7ff ff2f 	bl	80016dc <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800187e:	20b2      	movs	r0, #178	; 0xb2
 8001880:	f7ff fecc 	bl	800161c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001884:	4a39      	ldr	r2, [pc, #228]	; (800196c <ST7789_Init+0x130>)
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188e:	6018      	str	r0, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fee4 	bl	8001668 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff ff41 	bl	8001728 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80018a6:	20b7      	movs	r0, #183	; 0xb7
 80018a8:	f7ff feb8 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80018ac:	2035      	movs	r0, #53	; 0x35
 80018ae:	f7ff ff15 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80018b2:	20bb      	movs	r0, #187	; 0xbb
 80018b4:	f7ff feb2 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80018b8:	2019      	movs	r0, #25
 80018ba:	f7ff ff0f 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80018be:	20c0      	movs	r0, #192	; 0xc0
 80018c0:	f7ff feac 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80018c4:	202c      	movs	r0, #44	; 0x2c
 80018c6:	f7ff ff09 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80018ca:	20c2      	movs	r0, #194	; 0xc2
 80018cc:	f7ff fea6 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff ff03 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80018d6:	20c3      	movs	r0, #195	; 0xc3
 80018d8:	f7ff fea0 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80018dc:	2012      	movs	r0, #18
 80018de:	f7ff fefd 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80018e2:	20c4      	movs	r0, #196	; 0xc4
 80018e4:	f7ff fe9a 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80018e8:	2020      	movs	r0, #32
 80018ea:	f7ff fef7 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80018ee:	20c6      	movs	r0, #198	; 0xc6
 80018f0:	f7ff fe94 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80018f4:	200f      	movs	r0, #15
 80018f6:	f7ff fef1 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80018fa:	20d0      	movs	r0, #208	; 0xd0
 80018fc:	f7ff fe8e 	bl	800161c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001900:	20a4      	movs	r0, #164	; 0xa4
 8001902:	f7ff feeb 	bl	80016dc <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001906:	20a1      	movs	r0, #161	; 0xa1
 8001908:	f7ff fee8 	bl	80016dc <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800190c:	20e0      	movs	r0, #224	; 0xe0
 800190e:	f7ff fe85 	bl	800161c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <ST7789_Init+0x134>)
 8001914:	f107 0410 	add.w	r4, r7, #16
 8001918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191a:	c407      	stmia	r4!, {r0, r1, r2}
 800191c:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	210e      	movs	r1, #14
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe9f 	bl	8001668 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800192a:	20e1      	movs	r0, #225	; 0xe1
 800192c:	f7ff fe76 	bl	800161c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <ST7789_Init+0x138>)
 8001932:	463c      	mov	r4, r7
 8001934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001936:	c407      	stmia	r4!, {r0, r1, r2}
 8001938:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800193a:	463b      	mov	r3, r7
 800193c:	210e      	movs	r1, #14
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe92 	bl	8001668 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001944:	2021      	movs	r0, #33	; 0x21
 8001946:	f7ff fe69 	bl	800161c <ST7789_WriteCommand>

  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800194a:	2013      	movs	r0, #19
 800194c:	f7ff fe66 	bl	800161c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001950:	2029      	movs	r0, #41	; 0x29
 8001952:	f7ff fe63 	bl	800161c <ST7789_WriteCommand>

	HAL_Delay(50);
 8001956:	2032      	movs	r0, #50	; 0x32
 8001958:	f000 f96e 	bl	8001c38 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f80b 	bl	8001978 <ST7789_Fill_Color>
}
 8001962:	bf00      	nop
 8001964:	372c      	adds	r7, #44	; 0x2c
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	080045fc 	.word	0x080045fc
 8001970:	08004604 	.word	0x08004604
 8001974:	08004614 	.word	0x08004614

08001978 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001982:	23ef      	movs	r3, #239	; 0xef
 8001984:	f240 123f 	movw	r2, #319	; 0x13f
 8001988:	2100      	movs	r1, #0
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fef8 	bl	8001780 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 fdbb 	bl	8002514 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	81fb      	strh	r3, [r7, #14]
 80019a2:	e019      	b.n	80019d8 <ST7789_Fill_Color+0x60>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	81bb      	strh	r3, [r7, #12]
 80019a8:	e010      	b.n	80019cc <ST7789_Fill_Color+0x54>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	723b      	strb	r3, [r7, #8]
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe51 	bl	8001668 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	81bb      	strh	r3, [r7, #12]
 80019cc:	89bb      	ldrh	r3, [r7, #12]
 80019ce:	2bef      	cmp	r3, #239	; 0xef
 80019d0:	d9eb      	bls.n	80019aa <ST7789_Fill_Color+0x32>
		for (i = 0; i < ST7789_WIDTH; i++)
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	3301      	adds	r3, #1
 80019d6:	81fb      	strh	r3, [r7, #14]
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019de:	d3e1      	bcc.n	80019a4 <ST7789_Fill_Color+0x2c>
				}
	#endif
	ST7789_UnSelect();
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f000 fd93 	bl	8002514 <HAL_GPIO_WritePin>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <ST7789_WriteScaledChar>:
	}
	ST7789_UnSelect();
}

void ST7789_WriteScaledChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor, uint8_t scale)
{
 80019f6:	b082      	sub	sp, #8
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b08d      	sub	sp, #52	; 0x34
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001a00:	4603      	mov	r3, r0
 8001a02:	80fb      	strh	r3, [r7, #6]
 8001a04:	460b      	mov	r3, r1
 8001a06:	80bb      	strh	r3, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j, k, l, m;
	uint8_t height = font.height * scale;
 8001a0c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a10:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001a14:	fb12 f303 	smulbb	r3, r2, r3
 8001a18:	76fb      	strb	r3, [r7, #27]
	uint8_t width = font.width * scale;
 8001a1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a1e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001a22:	fb12 f303 	smulbb	r3, r2, r3
 8001a26:	76bb      	strb	r3, [r7, #26]

	ST7789_Select();
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f000 fd6f 	bl	8002514 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + width - 1, y + height - 1); //works correctly
 8001a36:	7ebb      	ldrb	r3, [r7, #26]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29c      	uxth	r4, r3
 8001a44:	7efb      	ldrb	r3, [r7, #27]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	88b9      	ldrh	r1, [r7, #4]
 8001a54:	88f8      	ldrh	r0, [r7, #6]
 8001a56:	4622      	mov	r2, r4
 8001a58:	f7ff fe92 	bl	8001780 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {//iterate over rows
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a60:	e066      	b.n	8001b30 <ST7789_WriteScaledChar+0x13a>

	b = font.data[(ch - 32) * font.height + i]; //select row data
 8001a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	3b20      	subs	r3, #32
 8001a68:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	440b      	add	r3, r1
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]

	for (k = 0; k < scale; k++) { //repeat scale number of times
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e04d      	b.n	8001b20 <ST7789_WriteScaledChar+0x12a>


		for (j = 0; j < font.width; ++j) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a88:	e041      	b.n	8001b0e <ST7789_WriteScaledChar+0x118>
			if ((b << j) & 0x8000) {
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01b      	beq.n	8001ad2 <ST7789_WriteScaledChar+0xdc>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001a9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	743b      	strb	r3, [r7, #16]
 8001aa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	747b      	strb	r3, [r7, #17]

				for (l = 0; l < scale; ++l)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	e008      	b.n	8001ac6 <ST7789_WriteScaledChar+0xd0>
				{
					ST7789_WriteData(data, sizeof(data));
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fdd4 	bl	8001668 <ST7789_WriteData>
				for (l = 0; l < scale; ++l)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3f1      	bcc.n	8001ab4 <ST7789_WriteScaledChar+0xbe>
 8001ad0:	e01a      	b.n	8001b08 <ST7789_WriteScaledChar+0x112>
				}
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	733b      	strb	r3, [r7, #12]
 8001ade:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	737b      	strb	r3, [r7, #13]

				for (m = 0; m < scale; ++m)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e008      	b.n	8001afe <ST7789_WriteScaledChar+0x108>
				{
					ST7789_WriteData(data, sizeof(data));
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fdb8 	bl	8001668 <ST7789_WriteData>
				for (m = 0; m < scale; ++m)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3f1      	bcc.n	8001aec <ST7789_WriteScaledChar+0xf6>
		for (j = 0; j < font.width; ++j) {
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b12:	461a      	mov	r2, r3
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3b7      	bcc.n	8001a8a <ST7789_WriteScaledChar+0x94>
	for (k = 0; k < scale; k++) { //repeat scale number of times
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3ac      	bcc.n	8001a84 <ST7789_WriteScaledChar+0x8e>
	for (i = 0; i < font.height; i++) {//iterate over rows
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b34:	461a      	mov	r2, r3
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d392      	bcc.n	8001a62 <ST7789_WriteScaledChar+0x6c>
			}
		}
		}
	}

	ST7789_UnSelect();
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f000 fce5 	bl	8002514 <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	3734      	adds	r7, #52	; 0x34
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b54:	b002      	add	sp, #8
 8001b56:	4770      	bx	lr

08001b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f000 f95a 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b68:	200f      	movs	r0, #15
 8001b6a:	f000 f80d 	bl	8001b88 <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	e001      	b.n	8001b7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7a:	f7ff fcbb 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]

}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_InitTick+0x68>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d022      	beq.n	8001be2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_InitTick+0x6c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_InitTick+0x68>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f966 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	d809      	bhi.n	8001bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bca:	f000 f932 	bl	8001e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_InitTick+0x70>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e007      	b.n	8001be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e004      	b.n	8001be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e001      	b.n	8001be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000040 	.word	0x20000040
 8001bf4:	20000030 	.word	0x20000030
 8001bf8:	2000003c 	.word	0x2000003c

08001bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x1c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x20>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_IncTick+0x1c>)
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	20000188 	.word	0x20000188
 8001c1c:	20000040 	.word	0x20000040

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000188 	.word	0x20000188

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c50:	d004      	beq.n	8001c5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_Delay+0x40>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5c:	bf00      	nop
 8001c5e:	f7ff ffdf 	bl	8001c20 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d8f7      	bhi.n	8001c5e <HAL_Delay+0x26>
  {
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000040 	.word	0x20000040

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff40 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff33 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa4 	bl	8001dd8 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e08d      	b.n	8001fca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_DMA_Init+0x138>)
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d80f      	bhi.n	8001eda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <HAL_DMA_Init+0x13c>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_DMA_Init+0x140>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	009a      	lsls	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a42      	ldr	r2, [pc, #264]	; (8001fe0 <HAL_DMA_Init+0x144>)
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed8:	e00e      	b.n	8001ef8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_DMA_Init+0x148>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_DMA_Init+0x140>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a3c      	ldr	r2, [pc, #240]	; (8001fe8 <HAL_DMA_Init+0x14c>)
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8fe 	bl	800214c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f58:	d102      	bne.n	8001f60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_DMA_Init+0x104>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d80c      	bhi.n	8001fa0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f91e 	bl	80021c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e008      	b.n	8001fb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40020407 	.word	0x40020407
 8001fd8:	bffdfff8 	.word	0xbffdfff8
 8001fdc:	cccccccd 	.word	0xcccccccd
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	bffdfbf8 	.word	0xbffdfbf8
 8001fe8:	40020400 	.word	0x40020400

08001fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d026      	beq.n	8002066 <HAL_DMA_IRQHandler+0x7a>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d021      	beq.n	8002066 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2104      	movs	r1, #4
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	2b00      	cmp	r3, #0
 800205a:	d071      	beq.n	8002140 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002064:	e06c      	b.n	8002140 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2202      	movs	r2, #2
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d029      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10b      	bne.n	80020aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020a 	bic.w	r2, r2, #10
 80020a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 021f 	and.w	r2, r3, #31
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2102      	movs	r1, #2
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d038      	beq.n	8002140 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020d6:	e033      	b.n	8002140 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2208      	movs	r2, #8
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02a      	beq.n	8002142 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d025      	beq.n	8002142 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020e 	bic.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f003 021f 	and.w	r2, r3, #31
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002140:	bf00      	nop
 8002142:	bf00      	nop
}
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800215c:	429a      	cmp	r2, r3
 800215e:	d802      	bhi.n	8002166 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e001      	b.n	800216a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002168:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3b08      	subs	r3, #8
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40020407 	.word	0x40020407
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020820 	.word	0x40020820
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	40020880 	.word	0x40020880

080021c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a08      	ldr	r2, [pc, #32]	; (800220c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2201      	movs	r2, #1
 80021f6:	409a      	lsls	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	1000823f 	.word	0x1000823f
 800220c:	40020940 	.word	0x40020940

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	e15a      	b.n	80024d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 814c 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b5b      	ldr	r3, [pc, #364]	; (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4a5a      	ldr	r2, [pc, #360]	; (80024f4 <HAL_GPIO_Init+0x2e4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6613      	str	r3, [r2, #96]	; 0x60
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239c:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_GPIO_Init+0x2e8>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023c6:	d01f      	beq.n	8002408 <HAL_GPIO_Init+0x1f8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_GPIO_Init+0x2ec>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d019      	beq.n	8002404 <HAL_GPIO_Init+0x1f4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_GPIO_Init+0x2f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1f0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_GPIO_Init+0x2f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_GPIO_Init+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_GPIO_Init+0x2fc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023f0:	2305      	movs	r3, #5
 80023f2:	e00a      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f4:	2306      	movs	r3, #6
 80023f6:	e008      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f8:	2304      	movs	r3, #4
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002400:	2302      	movs	r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002408:	2300      	movs	r3, #0
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241a:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_GPIO_Init+0x2e8>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_GPIO_Init+0x300>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244c:	4a30      	ldr	r2, [pc, #192]	; (8002510 <HAL_GPIO_Init+0x300>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_GPIO_Init+0x300>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002476:	4a26      	ldr	r2, [pc, #152]	; (8002510 <HAL_GPIO_Init+0x300>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_GPIO_Init+0x300>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_GPIO_Init+0x300>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_GPIO_Init+0x300>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_GPIO_Init+0x300>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f ae9d 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48001000 	.word	0x48001000
 800250c:	48001400 	.word	0x48001400
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d141      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d131      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002566:	4a46      	ldr	r2, [pc, #280]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002578:	4a41      	ldr	r2, [pc, #260]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2232      	movs	r2, #50	; 0x32
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002596:	e002      	b.n	800259e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3b01      	subs	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d102      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f2      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d158      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e057      	b.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025d4:	e04d      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d141      	bne.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d131      	bne.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2232      	movs	r2, #50	; 0x32
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002622:	e002      	b.n	800262a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3b01      	subs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002636:	d102      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f2      	bne.n	8002624 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d112      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e011      	b.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002660:	e007      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002670:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40007000 	.word	0x40007000
 8002684:	20000030 	.word	0x20000030
 8002688:	431bde83 	.word	0x431bde83

0800268c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269a:	6093      	str	r3, [r2, #8]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40007000 	.word	0x40007000

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e2fe      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d075      	beq.n	80027b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b97      	ldr	r3, [pc, #604]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	4b94      	ldr	r3, [pc, #592]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x3e>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e2d9      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x74>
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a84      	ldr	r2, [pc, #528]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7e      	ldr	r2, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7b      	ldr	r2, [pc, #492]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002744:	4b78      	ldr	r3, [pc, #480]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a77      	ldr	r2, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a74      	ldr	r2, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff fa5c 	bl	8001c20 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fa58 	bl	8001c20 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e29e      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xc0>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff fa48 	bl	8001c20 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fa44 	bl	8001c20 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e28a      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4b60      	ldr	r3, [pc, #384]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027cc:	4b56      	ldr	r3, [pc, #344]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_OscConfig+0x136>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_OscConfig+0x13c>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d11f      	bne.n	8002828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x154>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e25d      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4946      	ldr	r1, [pc, #280]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002814:	4b45      	ldr	r3, [pc, #276]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f9b5 	bl	8001b88 <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d043      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e249      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff f9f0 	bl	8001c20 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff f9ec 	bl	8001c20 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e232      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	492d      	ldr	r1, [pc, #180]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e01a      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff f9cc 	bl	8001c20 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff f9c8 	bl	8001c20 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e20e      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1e0>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d041      	beq.n	800293e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7ff f9a5 	bl	8001c20 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028da:	f7ff f9a1 	bl	8001c20 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1e7      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ef      	beq.n	80028da <HAL_RCC_OscConfig+0x22e>
 80028fa:	e020      	b.n	800293e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff f988 	bl	8001c20 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002912:	e00d      	b.n	8002930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff f984 	bl	8001c20 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d906      	bls.n	8002930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ca      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002930:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ea      	bne.n	8002914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80a6 	beq.w	8002a98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002950:	4b84      	ldr	r3, [pc, #528]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x2b4>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x2b6>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a7e      	ldr	r2, [pc, #504]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800297e:	2301      	movs	r3, #1
 8002980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002982:	4b79      	ldr	r3, [pc, #484]	; (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7ff f941 	bl	8001c20 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7ff f93d 	bl	8001c20 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e183      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_RCC_OscConfig+0x32e>
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d8:	e024      	b.n	8002a24 <HAL_RCC_OscConfig+0x378>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d110      	bne.n	8002a04 <HAL_RCC_OscConfig+0x358>
 80029e2:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a5e      	ldr	r2, [pc, #376]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a5a      	ldr	r2, [pc, #360]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a02:	e00f      	b.n	8002a24 <HAL_RCC_OscConfig+0x378>
 8002a04:	4b57      	ldr	r3, [pc, #348]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d016      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7ff f8f8 	bl	8001c20 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7ff f8f4 	bl	8001c20 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e138      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ed      	beq.n	8002a34 <HAL_RCC_OscConfig+0x388>
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f8e1 	bl	8001c20 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff f8dd 	bl	8001c20 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e121      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ed      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a86:	7ffb      	ldrb	r3, [r7, #31]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7ff f8b0 	bl	8001c20 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac4:	f7ff f8ac 	bl	8001c20 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0f2      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x418>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7ff f893 	bl	8001c20 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afe:	f7ff f88f 	bl	8001c20 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0d5      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80c9 	beq.w	8002cba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	f000 8083 	beq.w	8002c3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d15e      	bne.n	8002bfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f869 	bl	8001c20 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	e00c      	b.n	8002b6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7ff f865 	bl	8001c20 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d905      	bls.n	8002b6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0ab      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ec      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <HAL_RCC_OscConfig+0x61c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6a11      	ldr	r1, [r2, #32]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b92:	0212      	lsls	r2, r2, #8
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba6:	0852      	lsrs	r2, r2, #1
 8002ba8:	3a01      	subs	r2, #1
 8002baa:	0652      	lsls	r2, r2, #25
 8002bac:	4311      	orrs	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bb2:	06d2      	lsls	r2, r2, #27
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4943      	ldr	r1, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a40      	ldr	r2, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a3d      	ldr	r2, [pc, #244]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f824 	bl	8001c20 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff f820 	bl	8001c20 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e066      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x530>
 8002bfa:	e05e      	b.n	8002cba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a30      	ldr	r2, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f80a 	bl	8001c20 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff f806 	bl	8001c20 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04c      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	4924      	ldr	r1, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]
 8002c3a:	e03e      	b.n	8002cba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e039      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d12c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d123      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d113      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	019f800c 	.word	0x019f800c
 8002ccc:	feeefffc 	.word	0xfeeefffc

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e11e      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b91      	ldr	r3, [pc, #580]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d910      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b8e      	ldr	r3, [pc, #568]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 020f 	bic.w	r2, r3, #15
 8002cfe:	498c      	ldr	r1, [pc, #560]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e106      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d073      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d129      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2c:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0f4      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d3c:	f000 f966 	bl	800300c <RCC_GetSysClockFreqFromPLLSource>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <HAL_RCC_ClockConfig+0x268>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d93f      	bls.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d033      	beq.n	8002dca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d12f      	bne.n	8002dca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d72:	4a70      	ldr	r2, [pc, #448]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e024      	b.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0c6      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0be      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002da8:	f000 f8ce 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4a61      	ldr	r2, [pc, #388]	; (8002f38 <HAL_RCC_ClockConfig+0x268>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d909      	bls.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db6:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4957      	ldr	r1, [pc, #348]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ddc:	f7fe ff20 	bl	8001c20 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe ff1c 	bl	8001c20 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e095      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a42      	ldr	r2, [pc, #264]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e44:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4936      	ldr	r1, [pc, #216]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a32      	ldr	r2, [pc, #200]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d21d      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4929      	ldr	r1, [pc, #164]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fec6 	bl	8001c20 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fec2 	bl	8001c20 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e03b      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1ed      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4917      	ldr	r1, [pc, #92]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490f      	ldr	r1, [pc, #60]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002efa:	f000 f825 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	490c      	ldr	r1, [pc, #48]	; (8002f3c <HAL_RCC_ClockConfig+0x26c>)
 8002f0c:	5ccb      	ldrb	r3, [r1, r3]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x270>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fe32 	bl	8001b88 <HAL_InitTick>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	04c4b400 	.word	0x04c4b400
 8002f3c:	08004694 	.word	0x08004694
 8002f40:	20000030 	.word	0x20000030
 8002f44:	2000003c 	.word	0x2000003c

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e047      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e03e      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d136      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	0a12      	lsrs	r2, r2, #8
 8002faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0a12      	lsrs	r2, r2, #8
 8002fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
      break;
 8002fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0e5b      	lsrs	r3, r3, #25
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e001      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	00f42400 	.word	0x00f42400
 8003008:	016e3600 	.word	0x016e3600

0800300c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d10c      	bne.n	800304a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003030:	4a17      	ldr	r2, [pc, #92]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800303a:	68d2      	ldr	r2, [r2, #12]
 800303c:	0a12      	lsrs	r2, r2, #8
 800303e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
    break;
 8003048:	e00c      	b.n	8003064 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	0a12      	lsrs	r2, r2, #8
 8003058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
    break;
 8003062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0e5b      	lsrs	r3, r3, #25
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800307e:	687b      	ldr	r3, [r7, #4]
}
 8003080:	4618      	mov	r0, r3
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	016e3600 	.word	0x016e3600
 8003094:	00f42400 	.word	0x00f42400

08003098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e09d      	b.n	80031e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ba:	d009      	beq.n	80030d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
 80030c2:	e005      	b.n	80030d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f982 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003110:	d902      	bls.n	8003118 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e002      	b.n	800311e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003126:	d007      	beq.n	8003138 <HAL_SPI_Init+0xa0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	ea42 0103 	orr.w	r1, r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	f003 0204 	and.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031b4:	ea42 0103 	orr.w	r1, r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b088      	sub	sp, #32
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x22>
 800320c:	2302      	movs	r3, #2
 800320e:	e15f      	b.n	80034d0 <HAL_SPI_Transmit+0x2e2>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003218:	f7fe fd02 	bl	8001c20 <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d002      	beq.n	8003234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003232:	e148      	b.n	80034c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0x52>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003244:	e13f      	b.n	80034c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003290:	d10f      	bne.n	80032b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d007      	beq.n	80032d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032d8:	d94f      	bls.n	800337a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_Transmit+0xfa>
 80032e2:	8afb      	ldrh	r3, [r7, #22]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d142      	bne.n	800336e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	1c9a      	adds	r2, r3, #2
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800330c:	e02f      	b.n	800336e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b02      	cmp	r3, #2
 800331a:	d112      	bne.n	8003342 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	881a      	ldrh	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	1c9a      	adds	r2, r3, #2
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003340:	e015      	b.n	800336e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003342:	f7fe fc6d 	bl	8001c20 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d803      	bhi.n	800335a <HAL_SPI_Transmit+0x16c>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003358:	d102      	bne.n	8003360 <HAL_SPI_Transmit+0x172>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800336c:	e0ab      	b.n	80034c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ca      	bne.n	800330e <HAL_SPI_Transmit+0x120>
 8003378:	e080      	b.n	800347c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Transmit+0x19a>
 8003382:	8afb      	ldrh	r3, [r7, #22]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d174      	bne.n	8003472 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d912      	bls.n	80033b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b02      	subs	r3, #2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b6:	e05c      	b.n	8003472 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033de:	e048      	b.n	8003472 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d12b      	bne.n	8003446 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d912      	bls.n	800341e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b02      	subs	r3, #2
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800341c:	e029      	b.n	8003472 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003444:	e015      	b.n	8003472 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fe fbeb 	bl	8001c20 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x270>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x276>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003470:	e029      	b.n	80034c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1b1      	bne.n	80033e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fb69 	bl	8003b58 <SPI_EndRxTxTransaction>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e003      	b.n	80034c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034e6:	2301      	movs	r3, #1
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x26>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e20a      	b.n	8003914 <HAL_SPI_TransmitReceive+0x43c>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003506:	f7fe fb8b 	bl	8001c20 <HAL_GetTick>
 800350a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003512:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003522:	7efb      	ldrb	r3, [r7, #27]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d00e      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x6e>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d106      	bne.n	800353e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_SPI_TransmitReceive+0x66>
 8003538:	7efb      	ldrb	r3, [r7, #27]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d003      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003544:	e1e0      	b.n	8003908 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x80>
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800355e:	e1d3      	b.n	8003908 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b04      	cmp	r3, #4
 800356a:	d003      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b6:	d802      	bhi.n	80035be <HAL_SPI_TransmitReceive+0xe6>
 80035b8:	8a3b      	ldrh	r3, [r7, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d908      	bls.n	80035d0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e007      	b.n	80035e0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d007      	beq.n	80035fe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003606:	f240 8081 	bls.w	800370c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x140>
 8003612:	8a7b      	ldrh	r3, [r7, #18]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d16d      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363c:	e05a      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d11b      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x1ac>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_SPI_TransmitReceive+0x1ac>
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b01      	cmp	r3, #1
 800365a:	d113      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11c      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x1f4>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	b292      	uxth	r2, r2
 80036aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036c8:	2301      	movs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036cc:	f7fe faa8 	bl	8001c20 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d8:	429a      	cmp	r2, r3
 80036da:	d80b      	bhi.n	80036f4 <HAL_SPI_TransmitReceive+0x21c>
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e2:	d007      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80036f2:	e109      	b.n	8003908 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d19f      	bne.n	800363e <HAL_SPI_TransmitReceive+0x166>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d199      	bne.n	800363e <HAL_SPI_TransmitReceive+0x166>
 800370a:	e0e3      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_SPI_TransmitReceive+0x244>
 8003714:	8a7b      	ldrh	r3, [r7, #18]
 8003716:	2b01      	cmp	r3, #1
 8003718:	f040 80cf 	bne.w	80038ba <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d912      	bls.n	800374c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b02      	subs	r3, #2
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374a:	e0b6      	b.n	80038ba <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003772:	e0a2      	b.n	80038ba <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d134      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x314>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02f      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x314>
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2b01      	cmp	r3, #1
 8003790:	d12c      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d912      	bls.n	80037c2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b02      	subs	r3, #2
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c0:	e012      	b.n	80037e8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d148      	bne.n	800388c <HAL_SPI_TransmitReceive+0x3b4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d042      	beq.n	800388c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d923      	bls.n	800385a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	b292      	uxth	r2, r2
 800381e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b02      	subs	r3, #2
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d81f      	bhi.n	8003888 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	e016      	b.n	8003888 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f103 020c 	add.w	r2, r3, #12
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800388c:	f7fe f9c8 	bl	8001c20 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003898:	429a      	cmp	r2, r3
 800389a:	d803      	bhi.n	80038a4 <HAL_SPI_TransmitReceive+0x3cc>
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x3d2>
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80038b8:	e026      	b.n	8003908 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f af57 	bne.w	8003774 <HAL_SPI_TransmitReceive+0x29c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f47f af50 	bne.w	8003774 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f93d 	bl	8003b58 <SPI_EndRxTxTransaction>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e003      	b.n	8003908 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800392c:	f7fe f978 	bl	8001c20 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	4413      	add	r3, r2
 800393a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800393c:	f7fe f970 	bl	8001c20 <HAL_GetTick>
 8003940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003942:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	0d1b      	lsrs	r3, r3, #20
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003952:	e054      	b.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395a:	d050      	beq.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800395c:	f7fe f960 	bl	8001c20 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	429a      	cmp	r2, r3
 800396a:	d902      	bls.n	8003972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d13d      	bne.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398a:	d111      	bne.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003994:	d004      	beq.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d107      	bne.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d10f      	bne.n	80039da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e017      	b.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d19b      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000030 	.word	0x20000030

08003a2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a3e:	f7fe f8ef 	bl	8001c20 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a4e:	f7fe f8e7 	bl	8001c20 <HAL_GetTick>
 8003a52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00da      	lsls	r2, r3, #3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	0d1b      	lsrs	r3, r3, #20
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a74:	e060      	b.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a7c:	d107      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a94:	d050      	beq.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a96:	f7fe f8c3 	bl	8001c20 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d902      	bls.n	8003aac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d13d      	bne.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac4:	d111      	bne.n	8003aea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ace:	d004      	beq.n	8003ada <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad8:	d107      	bne.n	8003aea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	d10f      	bne.n	8003b14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e010      	b.n	8003b4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d196      	bne.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3728      	adds	r7, #40	; 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000030 	.word	0x20000030

08003b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff ff5b 	bl	8003a2c <SPI_WaitFifoStateUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e027      	b.n	8003bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fec0 	bl	800391c <SPI_WaitFlagStateUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e014      	b.n	8003bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff34 	bl	8003a2c <SPI_WaitFifoStateUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e000      	b.n	8003bdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	72fb      	strb	r3, [r7, #11]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <lis3dh_read_reg+0x20>
  {
    return -1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c02:	e00d      	b.n	8003c20 <lis3dh_read_reg+0x3c>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len, ctx->cs_pin);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685c      	ldr	r4, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68d8      	ldr	r0, [r3, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8a1b      	ldrh	r3, [r3, #16]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	7af9      	ldrb	r1, [r7, #11]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	47a0      	blx	r4
 8003c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}

08003c28 <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <lis3dh_write_reg+0x20>
  {
    return -1;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c46:	e00d      	b.n	8003c64 <lis3dh_write_reg+0x3c>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len,  ctx->cs_pin);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681c      	ldr	r4, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68d8      	ldr	r0, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8a1b      	ldrh	r3, [r3, #16]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	7af9      	ldrb	r1, [r7, #11]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	47a0      	blx	r4
 8003c60:	6178      	str	r0, [r7, #20]

  return ret;
 8003c62:	697b      	ldr	r3, [r7, #20]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd90      	pop	{r4, r7, pc}

08003c6c <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8003c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c82:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003c86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8003ca8:	f107 0210 	add.w	r2, r7, #16
 8003cac:	2301      	movs	r3, #1
 8003cae:	2120      	movs	r1, #32
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff97 	bl	8003be4 <lis3dh_read_reg>
 8003cb6:	6178      	str	r0, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <lis3dh_operating_mode_set+0x32>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	2123      	movs	r1, #35	; 0x23
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ff8c 	bl	8003be4 <lis3dh_read_reg>
 8003ccc:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d128      	bne.n	8003d26 <lis3dh_operating_mode_set+0x8a>
  {
    if (val == LIS3DH_HR_12bit)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <lis3dh_operating_mode_set+0x4e>
    {
      ctrl_reg1.lpen = 0;
 8003cda:	7c3b      	ldrb	r3, [r7, #16]
 8003cdc:	f36f 03c3 	bfc	r3, #3, #1
 8003ce0:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 8003ce2:	7b3b      	ldrb	r3, [r7, #12]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS3DH_NM_10bit)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <lis3dh_operating_mode_set+0x64>
    {
      ctrl_reg1.lpen = 0;
 8003cf0:	7c3b      	ldrb	r3, [r7, #16]
 8003cf2:	f36f 03c3 	bfc	r3, #3, #1
 8003cf6:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8003cf8:	7b3b      	ldrb	r3, [r7, #12]
 8003cfa:	f36f 03c3 	bfc	r3, #3, #1
 8003cfe:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS3DH_LP_8bit)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d107      	bne.n	8003d16 <lis3dh_operating_mode_set+0x7a>
    {
      ctrl_reg1.lpen = 1;
 8003d06:	7c3b      	ldrb	r3, [r7, #16]
 8003d08:	f043 0308 	orr.w	r3, r3, #8
 8003d0c:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8003d0e:	7b3b      	ldrb	r3, [r7, #12]
 8003d10:	f36f 03c3 	bfc	r3, #3, #1
 8003d14:	733b      	strb	r3, [r7, #12]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d16:	f107 0210 	add.w	r2, r7, #16
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff82 	bl	8003c28 <lis3dh_write_reg>
 8003d24:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <lis3dh_operating_mode_set+0xa0>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003d2c:	f107 020c 	add.w	r2, r7, #12
 8003d30:	2301      	movs	r3, #1
 8003d32:	2123      	movs	r1, #35	; 0x23
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff77 	bl	8003c28 <lis3dh_write_reg>
 8003d3a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003d3c:	697b      	ldr	r3, [r7, #20]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(const stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d52:	f107 0208 	add.w	r2, r7, #8
 8003d56:	2301      	movs	r3, #1
 8003d58:	2120      	movs	r1, #32
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff42 	bl	8003be4 <lis3dh_read_reg>
 8003d60:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <lis3dh_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	7a3b      	ldrb	r3, [r7, #8]
 8003d72:	f362 1307 	bfi	r3, r2, #4, #4
 8003d76:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d78:	f107 0208 	add.w	r2, r7, #8
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	2120      	movs	r1, #32
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff51 	bl	8003c28 <lis3dh_write_reg>
 8003d86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(const stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003d9e:	f107 0208 	add.w	r2, r7, #8
 8003da2:	2301      	movs	r3, #1
 8003da4:	2123      	movs	r1, #35	; 0x23
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ff1c 	bl	8003be4 <lis3dh_read_reg>
 8003dac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <lis3dh_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	7a3b      	ldrb	r3, [r7, #8]
 8003dbe:	f362 1305 	bfi	r3, r2, #4, #2
 8003dc2:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	2301      	movs	r3, #1
 8003dca:	2123      	movs	r1, #35	; 0x23
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff2b 	bl	8003c28 <lis3dh_write_reg>
 8003dd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003dea:	f107 0208 	add.w	r2, r7, #8
 8003dee:	2301      	movs	r3, #1
 8003df0:	2123      	movs	r1, #35	; 0x23
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fef6 	bl	8003be4 <lis3dh_read_reg>
 8003df8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <lis3dh_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	7a3b      	ldrb	r3, [r7, #8]
 8003e0a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e0e:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003e10:	f107 0208 	add.w	r2, r7, #8
 8003e14:	2301      	movs	r3, #1
 8003e16:	2123      	movs	r1, #35	; 0x23
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff05 	bl	8003c28 <lis3dh_write_reg>
 8003e1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <lis3dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *)&status_reg, 1);
 8003e34:	f107 0208 	add.w	r2, r7, #8
 8003e38:	2301      	movs	r3, #1
 8003e3a:	2127      	movs	r1, #39	; 0x27
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fed1 	bl	8003be4 <lis3dh_read_reg>
 8003e42:	60f8      	str	r0, [r7, #12]
  *val = status_reg.zyxda;
 8003e44:	7a3b      	ldrb	r3, [r7, #8]
 8003e46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	701a      	strb	r2, [r3, #0]

  return ret;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8003e66:	f107 020c 	add.w	r2, r7, #12
 8003e6a:	2306      	movs	r3, #6
 8003e6c:	2128      	movs	r1, #40	; 0x28
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff feb8 	bl	8003be4 <lis3dh_read_reg>
 8003e74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	b21a      	sxth	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	7b3b      	ldrb	r3, [r7, #12]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b21a      	sxth	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	b212      	sxth	r2, r2
 8003ea0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	3302      	adds	r3, #2
 8003ebc:	b212      	sxth	r2, r2
 8003ebe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003ec0:	7c7a      	ldrb	r2, [r7, #17]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	b212      	sxth	r2, r2
 8003ec8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	7c3b      	ldrb	r3, [r7, #16]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	b212      	sxth	r2, r2
 8003ee6:	801a      	strh	r2, [r3, #0]

  return ret;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <memset>:
 8003ef2:	4402      	add	r2, r0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d100      	bne.n	8003efc <memset+0xa>
 8003efa:	4770      	bx	lr
 8003efc:	f803 1b01 	strb.w	r1, [r3], #1
 8003f00:	e7f9      	b.n	8003ef6 <memset+0x4>
	...

08003f04 <__errno>:
 8003f04:	4b01      	ldr	r3, [pc, #4]	; (8003f0c <__errno+0x8>)
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000090 	.word	0x20000090

08003f10 <__libc_init_array>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4d0d      	ldr	r5, [pc, #52]	; (8003f48 <__libc_init_array+0x38>)
 8003f14:	4c0d      	ldr	r4, [pc, #52]	; (8003f4c <__libc_init_array+0x3c>)
 8003f16:	1b64      	subs	r4, r4, r5
 8003f18:	10a4      	asrs	r4, r4, #2
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	42a6      	cmp	r6, r4
 8003f1e:	d109      	bne.n	8003f34 <__libc_init_array+0x24>
 8003f20:	4d0b      	ldr	r5, [pc, #44]	; (8003f50 <__libc_init_array+0x40>)
 8003f22:	4c0c      	ldr	r4, [pc, #48]	; (8003f54 <__libc_init_array+0x44>)
 8003f24:	f000 fb4c 	bl	80045c0 <_init>
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	42a6      	cmp	r6, r4
 8003f30:	d105      	bne.n	8003f3e <__libc_init_array+0x2e>
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f38:	4798      	blx	r3
 8003f3a:	3601      	adds	r6, #1
 8003f3c:	e7ee      	b.n	8003f1c <__libc_init_array+0xc>
 8003f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f42:	4798      	blx	r3
 8003f44:	3601      	adds	r6, #1
 8003f46:	e7f2      	b.n	8003f2e <__libc_init_array+0x1e>
 8003f48:	080059f4 	.word	0x080059f4
 8003f4c:	080059f4 	.word	0x080059f4
 8003f50:	080059f4 	.word	0x080059f4
 8003f54:	080059f8 	.word	0x080059f8

08003f58 <asin>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	ed2d 8b02 	vpush	{d8}
 8003f5e:	ec55 4b10 	vmov	r4, r5, d0
 8003f62:	f000 f82d 	bl	8003fc0 <__ieee754_asin>
 8003f66:	4622      	mov	r2, r4
 8003f68:	462b      	mov	r3, r5
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8003f72:	eef0 8a60 	vmov.f32	s17, s1
 8003f76:	f7fc fda5 	bl	8000ac4 <__aeabi_dcmpun>
 8003f7a:	b9a8      	cbnz	r0, 8003fa8 <asin+0x50>
 8003f7c:	ec45 4b10 	vmov	d0, r4, r5
 8003f80:	f000 fa32 	bl	80043e8 <fabs>
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <asin+0x60>)
 8003f86:	ec51 0b10 	vmov	r0, r1, d0
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f7fc fd90 	bl	8000ab0 <__aeabi_dcmpgt>
 8003f90:	b150      	cbz	r0, 8003fa8 <asin+0x50>
 8003f92:	f7ff ffb7 	bl	8003f04 <__errno>
 8003f96:	ecbd 8b02 	vpop	{d8}
 8003f9a:	2321      	movs	r3, #33	; 0x21
 8003f9c:	6003      	str	r3, [r0, #0]
 8003f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa2:	4806      	ldr	r0, [pc, #24]	; (8003fbc <asin+0x64>)
 8003fa4:	f000 bb04 	b.w	80045b0 <nan>
 8003fa8:	eeb0 0a48 	vmov.f32	s0, s16
 8003fac:	eef0 0a68 	vmov.f32	s1, s17
 8003fb0:	ecbd 8b02 	vpop	{d8}
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	bf00      	nop
 8003fb8:	3ff00000 	.word	0x3ff00000
 8003fbc:	080059f0 	.word	0x080059f0

08003fc0 <__ieee754_asin>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	ed2d 8b04 	vpush	{d8-d9}
 8003fc8:	ec55 4b10 	vmov	r4, r5, d0
 8003fcc:	4bcc      	ldr	r3, [pc, #816]	; (8004300 <__ieee754_asin+0x340>)
 8003fce:	b083      	sub	sp, #12
 8003fd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003fd4:	4598      	cmp	r8, r3
 8003fd6:	9501      	str	r5, [sp, #4]
 8003fd8:	dd33      	ble.n	8004042 <__ieee754_asin+0x82>
 8003fda:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8003fde:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8003fe2:	ea58 0804 	orrs.w	r8, r8, r4
 8003fe6:	d117      	bne.n	8004018 <__ieee754_asin+0x58>
 8003fe8:	a3ab      	add	r3, pc, #684	; (adr r3, 8004298 <__ieee754_asin+0x2d8>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	ee10 0a10 	vmov	r0, s0
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	f7fc facc 	bl	8000590 <__aeabi_dmul>
 8003ff8:	a3a9      	add	r3, pc, #676	; (adr r3, 80042a0 <__ieee754_asin+0x2e0>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	4606      	mov	r6, r0
 8004000:	460f      	mov	r7, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc fac3 	bl	8000590 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4630      	mov	r0, r6
 8004010:	4639      	mov	r1, r7
 8004012:	f7fc f907 	bl	8000224 <__adddf3>
 8004016:	e00b      	b.n	8004030 <__ieee754_asin+0x70>
 8004018:	ee10 2a10 	vmov	r2, s0
 800401c:	462b      	mov	r3, r5
 800401e:	ee10 0a10 	vmov	r0, s0
 8004022:	4629      	mov	r1, r5
 8004024:	f7fc f8fc 	bl	8000220 <__aeabi_dsub>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	f7fc fbda 	bl	80007e4 <__aeabi_ddiv>
 8004030:	4604      	mov	r4, r0
 8004032:	460d      	mov	r5, r1
 8004034:	ec45 4b10 	vmov	d0, r4, r5
 8004038:	b003      	add	sp, #12
 800403a:	ecbd 8b04 	vpop	{d8-d9}
 800403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004042:	4bb0      	ldr	r3, [pc, #704]	; (8004304 <__ieee754_asin+0x344>)
 8004044:	4598      	cmp	r8, r3
 8004046:	dc11      	bgt.n	800406c <__ieee754_asin+0xac>
 8004048:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800404c:	f280 80ae 	bge.w	80041ac <__ieee754_asin+0x1ec>
 8004050:	a395      	add	r3, pc, #596	; (adr r3, 80042a8 <__ieee754_asin+0x2e8>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	ee10 0a10 	vmov	r0, s0
 800405a:	4629      	mov	r1, r5
 800405c:	f7fc f8e2 	bl	8000224 <__adddf3>
 8004060:	4ba9      	ldr	r3, [pc, #676]	; (8004308 <__ieee754_asin+0x348>)
 8004062:	2200      	movs	r2, #0
 8004064:	f7fc fd24 	bl	8000ab0 <__aeabi_dcmpgt>
 8004068:	2800      	cmp	r0, #0
 800406a:	d1e3      	bne.n	8004034 <__ieee754_asin+0x74>
 800406c:	ec45 4b10 	vmov	d0, r4, r5
 8004070:	f000 f9ba 	bl	80043e8 <fabs>
 8004074:	49a4      	ldr	r1, [pc, #656]	; (8004308 <__ieee754_asin+0x348>)
 8004076:	ec53 2b10 	vmov	r2, r3, d0
 800407a:	2000      	movs	r0, #0
 800407c:	f7fc f8d0 	bl	8000220 <__aeabi_dsub>
 8004080:	4ba2      	ldr	r3, [pc, #648]	; (800430c <__ieee754_asin+0x34c>)
 8004082:	2200      	movs	r2, #0
 8004084:	f7fc fa84 	bl	8000590 <__aeabi_dmul>
 8004088:	a389      	add	r3, pc, #548	; (adr r3, 80042b0 <__ieee754_asin+0x2f0>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	4604      	mov	r4, r0
 8004090:	460d      	mov	r5, r1
 8004092:	f7fc fa7d 	bl	8000590 <__aeabi_dmul>
 8004096:	a388      	add	r3, pc, #544	; (adr r3, 80042b8 <__ieee754_asin+0x2f8>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc f8c2 	bl	8000224 <__adddf3>
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f7fc fa74 	bl	8000590 <__aeabi_dmul>
 80040a8:	a385      	add	r3, pc, #532	; (adr r3, 80042c0 <__ieee754_asin+0x300>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc f8b7 	bl	8000220 <__aeabi_dsub>
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	f7fc fa6b 	bl	8000590 <__aeabi_dmul>
 80040ba:	a383      	add	r3, pc, #524	; (adr r3, 80042c8 <__ieee754_asin+0x308>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc f8b0 	bl	8000224 <__adddf3>
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	f7fc fa62 	bl	8000590 <__aeabi_dmul>
 80040cc:	a380      	add	r3, pc, #512	; (adr r3, 80042d0 <__ieee754_asin+0x310>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc f8a5 	bl	8000220 <__aeabi_dsub>
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	f7fc fa59 	bl	8000590 <__aeabi_dmul>
 80040de:	a37e      	add	r3, pc, #504	; (adr r3, 80042d8 <__ieee754_asin+0x318>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f7fc f89e 	bl	8000224 <__adddf3>
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	f7fc fa50 	bl	8000590 <__aeabi_dmul>
 80040f0:	a37b      	add	r3, pc, #492	; (adr r3, 80042e0 <__ieee754_asin+0x320>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	ec41 0b18 	vmov	d8, r0, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc fa47 	bl	8000590 <__aeabi_dmul>
 8004102:	a379      	add	r3, pc, #484	; (adr r3, 80042e8 <__ieee754_asin+0x328>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc f88a 	bl	8000220 <__aeabi_dsub>
 800410c:	4622      	mov	r2, r4
 800410e:	462b      	mov	r3, r5
 8004110:	f7fc fa3e 	bl	8000590 <__aeabi_dmul>
 8004114:	a376      	add	r3, pc, #472	; (adr r3, 80042f0 <__ieee754_asin+0x330>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc f883 	bl	8000224 <__adddf3>
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	f7fc fa35 	bl	8000590 <__aeabi_dmul>
 8004126:	a374      	add	r3, pc, #464	; (adr r3, 80042f8 <__ieee754_asin+0x338>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc f878 	bl	8000220 <__aeabi_dsub>
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f7fc fa2c 	bl	8000590 <__aeabi_dmul>
 8004138:	4b73      	ldr	r3, [pc, #460]	; (8004308 <__ieee754_asin+0x348>)
 800413a:	2200      	movs	r2, #0
 800413c:	f7fc f872 	bl	8000224 <__adddf3>
 8004140:	ec45 4b10 	vmov	d0, r4, r5
 8004144:	4606      	mov	r6, r0
 8004146:	460f      	mov	r7, r1
 8004148:	f000 f958 	bl	80043fc <__ieee754_sqrt>
 800414c:	4b70      	ldr	r3, [pc, #448]	; (8004310 <__ieee754_asin+0x350>)
 800414e:	4598      	cmp	r8, r3
 8004150:	ec5b ab10 	vmov	sl, fp, d0
 8004154:	f340 80de 	ble.w	8004314 <__ieee754_asin+0x354>
 8004158:	4632      	mov	r2, r6
 800415a:	463b      	mov	r3, r7
 800415c:	ec51 0b18 	vmov	r0, r1, d8
 8004160:	f7fc fb40 	bl	80007e4 <__aeabi_ddiv>
 8004164:	4652      	mov	r2, sl
 8004166:	465b      	mov	r3, fp
 8004168:	f7fc fa12 	bl	8000590 <__aeabi_dmul>
 800416c:	4652      	mov	r2, sl
 800416e:	465b      	mov	r3, fp
 8004170:	f7fc f858 	bl	8000224 <__adddf3>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	f7fc f854 	bl	8000224 <__adddf3>
 800417c:	a348      	add	r3, pc, #288	; (adr r3, 80042a0 <__ieee754_asin+0x2e0>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc f84d 	bl	8000220 <__aeabi_dsub>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	a143      	add	r1, pc, #268	; (adr r1, 8004298 <__ieee754_asin+0x2d8>)
 800418c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004190:	f7fc f846 	bl	8000220 <__aeabi_dsub>
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfdc      	itt	le
 800419a:	4602      	movle	r2, r0
 800419c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	bfdc      	itt	le
 80041a6:	4614      	movle	r4, r2
 80041a8:	461d      	movle	r5, r3
 80041aa:	e743      	b.n	8004034 <__ieee754_asin+0x74>
 80041ac:	ee10 2a10 	vmov	r2, s0
 80041b0:	ee10 0a10 	vmov	r0, s0
 80041b4:	462b      	mov	r3, r5
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc f9ea 	bl	8000590 <__aeabi_dmul>
 80041bc:	a33c      	add	r3, pc, #240	; (adr r3, 80042b0 <__ieee754_asin+0x2f0>)
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	4606      	mov	r6, r0
 80041c4:	460f      	mov	r7, r1
 80041c6:	f7fc f9e3 	bl	8000590 <__aeabi_dmul>
 80041ca:	a33b      	add	r3, pc, #236	; (adr r3, 80042b8 <__ieee754_asin+0x2f8>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc f828 	bl	8000224 <__adddf3>
 80041d4:	4632      	mov	r2, r6
 80041d6:	463b      	mov	r3, r7
 80041d8:	f7fc f9da 	bl	8000590 <__aeabi_dmul>
 80041dc:	a338      	add	r3, pc, #224	; (adr r3, 80042c0 <__ieee754_asin+0x300>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fc f81d 	bl	8000220 <__aeabi_dsub>
 80041e6:	4632      	mov	r2, r6
 80041e8:	463b      	mov	r3, r7
 80041ea:	f7fc f9d1 	bl	8000590 <__aeabi_dmul>
 80041ee:	a336      	add	r3, pc, #216	; (adr r3, 80042c8 <__ieee754_asin+0x308>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc f816 	bl	8000224 <__adddf3>
 80041f8:	4632      	mov	r2, r6
 80041fa:	463b      	mov	r3, r7
 80041fc:	f7fc f9c8 	bl	8000590 <__aeabi_dmul>
 8004200:	a333      	add	r3, pc, #204	; (adr r3, 80042d0 <__ieee754_asin+0x310>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f7fc f80b 	bl	8000220 <__aeabi_dsub>
 800420a:	4632      	mov	r2, r6
 800420c:	463b      	mov	r3, r7
 800420e:	f7fc f9bf 	bl	8000590 <__aeabi_dmul>
 8004212:	a331      	add	r3, pc, #196	; (adr r3, 80042d8 <__ieee754_asin+0x318>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fc f804 	bl	8000224 <__adddf3>
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	f7fc f9b6 	bl	8000590 <__aeabi_dmul>
 8004224:	a32e      	add	r3, pc, #184	; (adr r3, 80042e0 <__ieee754_asin+0x320>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	4680      	mov	r8, r0
 800422c:	4689      	mov	r9, r1
 800422e:	4630      	mov	r0, r6
 8004230:	4639      	mov	r1, r7
 8004232:	f7fc f9ad 	bl	8000590 <__aeabi_dmul>
 8004236:	a32c      	add	r3, pc, #176	; (adr r3, 80042e8 <__ieee754_asin+0x328>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fb fff0 	bl	8000220 <__aeabi_dsub>
 8004240:	4632      	mov	r2, r6
 8004242:	463b      	mov	r3, r7
 8004244:	f7fc f9a4 	bl	8000590 <__aeabi_dmul>
 8004248:	a329      	add	r3, pc, #164	; (adr r3, 80042f0 <__ieee754_asin+0x330>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fb ffe9 	bl	8000224 <__adddf3>
 8004252:	4632      	mov	r2, r6
 8004254:	463b      	mov	r3, r7
 8004256:	f7fc f99b 	bl	8000590 <__aeabi_dmul>
 800425a:	a327      	add	r3, pc, #156	; (adr r3, 80042f8 <__ieee754_asin+0x338>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fb ffde 	bl	8000220 <__aeabi_dsub>
 8004264:	4632      	mov	r2, r6
 8004266:	463b      	mov	r3, r7
 8004268:	f7fc f992 	bl	8000590 <__aeabi_dmul>
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <__ieee754_asin+0x348>)
 800426e:	2200      	movs	r2, #0
 8004270:	f7fb ffd8 	bl	8000224 <__adddf3>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc fab2 	bl	80007e4 <__aeabi_ddiv>
 8004280:	4622      	mov	r2, r4
 8004282:	462b      	mov	r3, r5
 8004284:	f7fc f984 	bl	8000590 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4620      	mov	r0, r4
 800428e:	4629      	mov	r1, r5
 8004290:	e6bf      	b.n	8004012 <__ieee754_asin+0x52>
 8004292:	bf00      	nop
 8004294:	f3af 8000 	nop.w
 8004298:	54442d18 	.word	0x54442d18
 800429c:	3ff921fb 	.word	0x3ff921fb
 80042a0:	33145c07 	.word	0x33145c07
 80042a4:	3c91a626 	.word	0x3c91a626
 80042a8:	8800759c 	.word	0x8800759c
 80042ac:	7e37e43c 	.word	0x7e37e43c
 80042b0:	0dfdf709 	.word	0x0dfdf709
 80042b4:	3f023de1 	.word	0x3f023de1
 80042b8:	7501b288 	.word	0x7501b288
 80042bc:	3f49efe0 	.word	0x3f49efe0
 80042c0:	b5688f3b 	.word	0xb5688f3b
 80042c4:	3fa48228 	.word	0x3fa48228
 80042c8:	0e884455 	.word	0x0e884455
 80042cc:	3fc9c155 	.word	0x3fc9c155
 80042d0:	03eb6f7d 	.word	0x03eb6f7d
 80042d4:	3fd4d612 	.word	0x3fd4d612
 80042d8:	55555555 	.word	0x55555555
 80042dc:	3fc55555 	.word	0x3fc55555
 80042e0:	b12e9282 	.word	0xb12e9282
 80042e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80042e8:	1b8d0159 	.word	0x1b8d0159
 80042ec:	3fe6066c 	.word	0x3fe6066c
 80042f0:	9c598ac8 	.word	0x9c598ac8
 80042f4:	40002ae5 	.word	0x40002ae5
 80042f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80042fc:	40033a27 	.word	0x40033a27
 8004300:	3fefffff 	.word	0x3fefffff
 8004304:	3fdfffff 	.word	0x3fdfffff
 8004308:	3ff00000 	.word	0x3ff00000
 800430c:	3fe00000 	.word	0x3fe00000
 8004310:	3fef3332 	.word	0x3fef3332
 8004314:	ee10 2a10 	vmov	r2, s0
 8004318:	ee10 0a10 	vmov	r0, s0
 800431c:	465b      	mov	r3, fp
 800431e:	4659      	mov	r1, fp
 8004320:	f7fb ff80 	bl	8000224 <__adddf3>
 8004324:	4632      	mov	r2, r6
 8004326:	463b      	mov	r3, r7
 8004328:	ec41 0b19 	vmov	d9, r0, r1
 800432c:	ec51 0b18 	vmov	r0, r1, d8
 8004330:	f7fc fa58 	bl	80007e4 <__aeabi_ddiv>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	ec51 0b19 	vmov	r0, r1, d9
 800433c:	f7fc f928 	bl	8000590 <__aeabi_dmul>
 8004340:	f04f 0800 	mov.w	r8, #0
 8004344:	4606      	mov	r6, r0
 8004346:	460f      	mov	r7, r1
 8004348:	4642      	mov	r2, r8
 800434a:	465b      	mov	r3, fp
 800434c:	4640      	mov	r0, r8
 800434e:	4659      	mov	r1, fp
 8004350:	f7fc f91e 	bl	8000590 <__aeabi_dmul>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4620      	mov	r0, r4
 800435a:	4629      	mov	r1, r5
 800435c:	f7fb ff60 	bl	8000220 <__aeabi_dsub>
 8004360:	4642      	mov	r2, r8
 8004362:	4604      	mov	r4, r0
 8004364:	460d      	mov	r5, r1
 8004366:	465b      	mov	r3, fp
 8004368:	4650      	mov	r0, sl
 800436a:	4659      	mov	r1, fp
 800436c:	f7fb ff5a 	bl	8000224 <__adddf3>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4620      	mov	r0, r4
 8004376:	4629      	mov	r1, r5
 8004378:	f7fc fa34 	bl	80007e4 <__aeabi_ddiv>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	f7fb ff50 	bl	8000224 <__adddf3>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	a113      	add	r1, pc, #76	; (adr r1, 80043d8 <__ieee754_asin+0x418>)
 800438a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800438e:	f7fb ff47 	bl	8000220 <__aeabi_dsub>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4630      	mov	r0, r6
 8004398:	4639      	mov	r1, r7
 800439a:	f7fb ff41 	bl	8000220 <__aeabi_dsub>
 800439e:	4642      	mov	r2, r8
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	465b      	mov	r3, fp
 80043a6:	4640      	mov	r0, r8
 80043a8:	4659      	mov	r1, fp
 80043aa:	f7fb ff3b 	bl	8000224 <__adddf3>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	a10b      	add	r1, pc, #44	; (adr r1, 80043e0 <__ieee754_asin+0x420>)
 80043b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043b8:	f7fb ff32 	bl	8000220 <__aeabi_dsub>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4620      	mov	r0, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	f7fb ff2c 	bl	8000220 <__aeabi_dsub>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	a104      	add	r1, pc, #16	; (adr r1, 80043e0 <__ieee754_asin+0x420>)
 80043ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043d2:	e6dd      	b.n	8004190 <__ieee754_asin+0x1d0>
 80043d4:	f3af 8000 	nop.w
 80043d8:	33145c07 	.word	0x33145c07
 80043dc:	3c91a626 	.word	0x3c91a626
 80043e0:	54442d18 	.word	0x54442d18
 80043e4:	3fe921fb 	.word	0x3fe921fb

080043e8 <fabs>:
 80043e8:	ec51 0b10 	vmov	r0, r1, d0
 80043ec:	ee10 2a10 	vmov	r2, s0
 80043f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043f4:	ec43 2b10 	vmov	d0, r2, r3
 80043f8:	4770      	bx	lr
	...

080043fc <__ieee754_sqrt>:
 80043fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004400:	ec55 4b10 	vmov	r4, r5, d0
 8004404:	4e67      	ldr	r6, [pc, #412]	; (80045a4 <__ieee754_sqrt+0x1a8>)
 8004406:	43ae      	bics	r6, r5
 8004408:	ee10 0a10 	vmov	r0, s0
 800440c:	ee10 2a10 	vmov	r2, s0
 8004410:	4629      	mov	r1, r5
 8004412:	462b      	mov	r3, r5
 8004414:	d10d      	bne.n	8004432 <__ieee754_sqrt+0x36>
 8004416:	f7fc f8bb 	bl	8000590 <__aeabi_dmul>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fb feff 	bl	8000224 <__adddf3>
 8004426:	4604      	mov	r4, r0
 8004428:	460d      	mov	r5, r1
 800442a:	ec45 4b10 	vmov	d0, r4, r5
 800442e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	2d00      	cmp	r5, #0
 8004434:	dc0b      	bgt.n	800444e <__ieee754_sqrt+0x52>
 8004436:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800443a:	4326      	orrs	r6, r4
 800443c:	d0f5      	beq.n	800442a <__ieee754_sqrt+0x2e>
 800443e:	b135      	cbz	r5, 800444e <__ieee754_sqrt+0x52>
 8004440:	f7fb feee 	bl	8000220 <__aeabi_dsub>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	f7fc f9cc 	bl	80007e4 <__aeabi_ddiv>
 800444c:	e7eb      	b.n	8004426 <__ieee754_sqrt+0x2a>
 800444e:	1509      	asrs	r1, r1, #20
 8004450:	f000 808d 	beq.w	800456e <__ieee754_sqrt+0x172>
 8004454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004458:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800445c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004460:	07c9      	lsls	r1, r1, #31
 8004462:	bf5c      	itt	pl
 8004464:	005b      	lslpl	r3, r3, #1
 8004466:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800446a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800446e:	bf58      	it	pl
 8004470:	0052      	lslpl	r2, r2, #1
 8004472:	2500      	movs	r5, #0
 8004474:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004478:	1076      	asrs	r6, r6, #1
 800447a:	0052      	lsls	r2, r2, #1
 800447c:	f04f 0e16 	mov.w	lr, #22
 8004480:	46ac      	mov	ip, r5
 8004482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004486:	eb0c 0001 	add.w	r0, ip, r1
 800448a:	4298      	cmp	r0, r3
 800448c:	bfde      	ittt	le
 800448e:	1a1b      	suble	r3, r3, r0
 8004490:	eb00 0c01 	addle.w	ip, r0, r1
 8004494:	186d      	addle	r5, r5, r1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	f1be 0e01 	subs.w	lr, lr, #1
 800449c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80044a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80044a8:	d1ed      	bne.n	8004486 <__ieee754_sqrt+0x8a>
 80044aa:	4674      	mov	r4, lr
 80044ac:	2720      	movs	r7, #32
 80044ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80044b2:	4563      	cmp	r3, ip
 80044b4:	eb01 000e 	add.w	r0, r1, lr
 80044b8:	dc02      	bgt.n	80044c0 <__ieee754_sqrt+0xc4>
 80044ba:	d113      	bne.n	80044e4 <__ieee754_sqrt+0xe8>
 80044bc:	4290      	cmp	r0, r2
 80044be:	d811      	bhi.n	80044e4 <__ieee754_sqrt+0xe8>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	eb00 0e01 	add.w	lr, r0, r1
 80044c6:	da57      	bge.n	8004578 <__ieee754_sqrt+0x17c>
 80044c8:	f1be 0f00 	cmp.w	lr, #0
 80044cc:	db54      	blt.n	8004578 <__ieee754_sqrt+0x17c>
 80044ce:	f10c 0801 	add.w	r8, ip, #1
 80044d2:	eba3 030c 	sub.w	r3, r3, ip
 80044d6:	4290      	cmp	r0, r2
 80044d8:	bf88      	it	hi
 80044da:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80044de:	1a12      	subs	r2, r2, r0
 80044e0:	440c      	add	r4, r1
 80044e2:	46c4      	mov	ip, r8
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	3f01      	subs	r7, #1
 80044e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80044ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80044f4:	d1dd      	bne.n	80044b2 <__ieee754_sqrt+0xb6>
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d01b      	beq.n	8004532 <__ieee754_sqrt+0x136>
 80044fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80045a8 <__ieee754_sqrt+0x1ac>
 80044fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80045ac <__ieee754_sqrt+0x1b0>
 8004502:	e9da 0100 	ldrd	r0, r1, [sl]
 8004506:	e9db 2300 	ldrd	r2, r3, [fp]
 800450a:	f7fb fe89 	bl	8000220 <__aeabi_dsub>
 800450e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4640      	mov	r0, r8
 8004518:	4649      	mov	r1, r9
 800451a:	f7fc fab5 	bl	8000a88 <__aeabi_dcmple>
 800451e:	b140      	cbz	r0, 8004532 <__ieee754_sqrt+0x136>
 8004520:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004524:	e9da 0100 	ldrd	r0, r1, [sl]
 8004528:	e9db 2300 	ldrd	r2, r3, [fp]
 800452c:	d126      	bne.n	800457c <__ieee754_sqrt+0x180>
 800452e:	3501      	adds	r5, #1
 8004530:	463c      	mov	r4, r7
 8004532:	106a      	asrs	r2, r5, #1
 8004534:	0863      	lsrs	r3, r4, #1
 8004536:	07e9      	lsls	r1, r5, #31
 8004538:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800453c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004540:	bf48      	it	mi
 8004542:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004546:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800454a:	461c      	mov	r4, r3
 800454c:	e76d      	b.n	800442a <__ieee754_sqrt+0x2e>
 800454e:	0ad3      	lsrs	r3, r2, #11
 8004550:	3815      	subs	r0, #21
 8004552:	0552      	lsls	r2, r2, #21
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0fa      	beq.n	800454e <__ieee754_sqrt+0x152>
 8004558:	02dc      	lsls	r4, r3, #11
 800455a:	d50a      	bpl.n	8004572 <__ieee754_sqrt+0x176>
 800455c:	f1c1 0420 	rsb	r4, r1, #32
 8004560:	fa22 f404 	lsr.w	r4, r2, r4
 8004564:	1e4d      	subs	r5, r1, #1
 8004566:	408a      	lsls	r2, r1
 8004568:	4323      	orrs	r3, r4
 800456a:	1b41      	subs	r1, r0, r5
 800456c:	e772      	b.n	8004454 <__ieee754_sqrt+0x58>
 800456e:	4608      	mov	r0, r1
 8004570:	e7f0      	b.n	8004554 <__ieee754_sqrt+0x158>
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	3101      	adds	r1, #1
 8004576:	e7ef      	b.n	8004558 <__ieee754_sqrt+0x15c>
 8004578:	46e0      	mov	r8, ip
 800457a:	e7aa      	b.n	80044d2 <__ieee754_sqrt+0xd6>
 800457c:	f7fb fe52 	bl	8000224 <__adddf3>
 8004580:	e9da 8900 	ldrd	r8, r9, [sl]
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4640      	mov	r0, r8
 800458a:	4649      	mov	r1, r9
 800458c:	f7fc fa72 	bl	8000a74 <__aeabi_dcmplt>
 8004590:	b120      	cbz	r0, 800459c <__ieee754_sqrt+0x1a0>
 8004592:	1ca0      	adds	r0, r4, #2
 8004594:	bf08      	it	eq
 8004596:	3501      	addeq	r5, #1
 8004598:	3402      	adds	r4, #2
 800459a:	e7ca      	b.n	8004532 <__ieee754_sqrt+0x136>
 800459c:	3401      	adds	r4, #1
 800459e:	f024 0401 	bic.w	r4, r4, #1
 80045a2:	e7c6      	b.n	8004532 <__ieee754_sqrt+0x136>
 80045a4:	7ff00000 	.word	0x7ff00000
 80045a8:	20000098 	.word	0x20000098
 80045ac:	200000a0 	.word	0x200000a0

080045b0 <nan>:
 80045b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80045b8 <nan+0x8>
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	00000000 	.word	0x00000000
 80045bc:	7ff80000 	.word	0x7ff80000

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
